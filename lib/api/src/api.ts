/* tslint:disable */
/* eslint-disable */
/**
 * @invoicer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateInvoiceDto
 */
export interface CreateInvoiceDto {
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof CreateInvoiceDto
     */
    'paymentTerms': number;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'clientStreetAddress': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'clientCity': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'clientPostCode': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'clientCountry': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'senderStreetAddress': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'senderCity': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'senderPostCode': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'senderCountry': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'clientName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'clientEmail': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'invoiceDate': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceDto
     */
    'projectDescription': string;
    /**
     * 
     * @type {Array<CreateInvoiceItem>}
     * @memberof CreateInvoiceDto
     */
    'items': Array<CreateInvoiceItem>;
}
/**
 * 
 * @export
 * @interface CreateInvoiceItem
 */
export interface CreateInvoiceItem {
    /**
     * 
     * @type {string}
     * @memberof CreateInvoiceItem
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CreateInvoiceItem
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof CreateInvoiceItem
     */
    'priceCents': number;
}
/**
 * 
 * @export
 * @interface InvoiceDto
 */
export interface InvoiceDto {
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'invoiceDate': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDto
     */
    'paymentTerms': number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'status': InvoiceDtoStatusEnum;
    /**
     * 
     * @type {Array<InvoiceItemDto>}
     * @memberof InvoiceDto
     */
    'invoiceItems': Array<InvoiceItemDto>;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'clientName': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'clientEmail': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'clientStreet': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'clientCity': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'clientPostCode': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'clientCountry': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'senderStreet': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'senderCity': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'senderPostCode': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDto
     */
    'senderCountry': string;
}

export const InvoiceDtoStatusEnum = {
    Paid: 'paid',
    Draft: 'draft',
    Pending: 'pending'
} as const;

export type InvoiceDtoStatusEnum = typeof InvoiceDtoStatusEnum[keyof typeof InvoiceDtoStatusEnum];

/**
 * 
 * @export
 * @interface InvoiceItemDto
 */
export interface InvoiceItemDto {
    /**
     * 
     * @type {string}
     * @memberof InvoiceItemDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceItemDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof InvoiceItemDto
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceItemDto
     */
    'priceCents': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a single invoice with a \"pending\" status.  To create a draft invoice, use the `invoiceCreateDraft` method.
         * @param {CreateInvoiceDto} createInvoiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoiceCreate: async (createInvoiceDto: CreateInvoiceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createInvoiceDto' is not null or undefined
            assertParamExists('invoiceCreate', 'createInvoiceDto', createInvoiceDto)
            const localVarPath = `/invoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createInvoiceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single invoice given an ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoiceFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('invoiceFindOne', 'id', id)
            const localVarPath = `/invoice/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a single invoice with a \"pending\" status.  To create a draft invoice, use the `invoiceCreateDraft` method.
         * @param {CreateInvoiceDto} createInvoiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoiceCreate(createInvoiceDto: CreateInvoiceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoiceCreate(createInvoiceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single invoice given an ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoiceFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoiceFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGetHello(options?: any): AxiosPromise<number> {
            return localVarFp.appGetHello(options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a single invoice with a \"pending\" status.  To create a draft invoice, use the `invoiceCreateDraft` method.
         * @param {CreateInvoiceDto} createInvoiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoiceCreate(createInvoiceDto: CreateInvoiceDto, options?: any): AxiosPromise<InvoiceDto> {
            return localVarFp.invoiceCreate(createInvoiceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single invoice given an ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoiceFindOne(id: string, options?: any): AxiosPromise<InvoiceDto> {
            return localVarFp.invoiceFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appGetHello(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appGetHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a single invoice with a \"pending\" status.  To create a draft invoice, use the `invoiceCreateDraft` method.
     * @param {CreateInvoiceDto} createInvoiceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invoiceCreate(createInvoiceDto: CreateInvoiceDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invoiceCreate(createInvoiceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single invoice given an ID.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invoiceFindOne(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invoiceFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}


